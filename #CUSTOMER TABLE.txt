#CUSTOMER TABLE
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    age INT,
    gender VARCHAR(10),
    location VARCHAR(100),
    registration_date DATE
);
#SALES TABLE
CREATE TABLE sales (
    sale_id INT PRIMARY KEY,
    customer_id INT,
    purchase_date DATE,
    total_purchase_amount DECIMAL(10, 2),
    order_id INT UNIQUE,
    product_id INT,
    quantity INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
#CAMPAIGN DATA TABLE
CREATE TABLE campaign_data (
    campaign_id INT PRIMARY KEY,
    customer_id INT,
    campaign_name VARCHAR(100),
    sent_date DATE,
    purchase_made VARCHAR(3), -- 'Yes' or 'No'
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);
#INSERT SAMPLE DATA INTO CUSTOMER
INSERT INTO customers (customer_id, first_name, last_name, email, age, gender, location, registration_date)
VALUES
(1, 'John', 'Doe', 'sram.saxena@example.com', 28, 'Male', 'New York', '2020-01-15'),
(2, 'Jane', 'Smith', 'jabhay.saini@example.com', 34, 'Female', 'Los Angeles', '2019-05-22');
#INSERT SAMPLE DATA INTO SALES
INSERT INTO sales (sale_id, customer_id, purchase_date, total_purchase_amount, order_id, product_id, quantity)
VALUES
(1, 1, '2023-08-01', 120.50, 101, 1001, 2),
(2, 1, '2023-09-10', 80.00, 102, 1002, 1),
(3, 2, '2023-07-15', 200.00, 103, 1003, 4);
#INSERT DATA SAMPLES INTO CAMPAIGN_DATA
INSERT INTO campaign_data (campaign_id, customer_id, campaign_name, sent_date, purchase_made)
VALUES
(1, 1, 'Summer Sports Sale', '2023-07-01', 'Yes'),
(2, 2, 'Winter Gear Promo', '2023-12-01', 'No');
-- Aggregating sales data by customer and date
SELECT 
    customer_id,
    SUM(total_purchase_amount) AS total_spent,
    COUNT(order_id) AS total_orders,
    MAX(purchase_date) AS last_purchase_date,
    AVG(total_purchase_amount) AS avg_purchase_value
FROM 
    sales
GROUP BY 
    customer_id;
-- Aggregating monthly sales data for trend analysis
SELECT 
    DATE_TRUNC('month', purchase_date) AS month,
    SUM(total_purchase_amount) AS total_sales
FROM 
    sales
GROUP BY 
    DATE_TRUNC('month', purchase_date)
ORDER BY 
    month;
--Customer segmentation based on purchase history and demographics
SELECT 
    customer_id,
    CASE
        WHEN total_spent > 1000 THEN 'High Value'
        WHEN total_spent BETWEEN 500 AND 1000 THEN 'Mid Value'
        ELSE 'Low Value'
    END AS customer_segment,
    age_group,
    location,
    gender
FROM (
    SELECT 
        c.customer_id,
        SUM(s.total_purchase_amount) AS total_spent,
        CASE
            WHEN c.age BETWEEN 18 AND 25 THEN '18-25'
            WHEN c.age BETWEEN 26 AND 35 THEN '26-35'
            WHEN c.age BETWEEN 36 AND 50 THEN '36-50'
            ELSE '50+'
        END AS age_group,
        c.location,
        c.gender
    FROM 
        customers c
    JOIN 
        sales s ON c.customer_id = s.customer_id
    GROUP BY 
        c.customer_id, c.age, c.location, c.gender
) AS customer_data;
-- Tracking conversions by customer segment after applying targeting strategies
SELECT 
    customer_segment,
    COUNT(DISTINCT customer_id) AS total_customers,
    SUM(CASE WHEN purchase_made = 'Yes' THEN 1 ELSE 0 END) AS successful_conversions,
    ROUND((SUM(CASE WHEN purchase_made = 'Yes' THEN 1 ELSE 0 END) / COUNT(DISTINCT customer_id)) * 100, 2) AS conversion_rate
FROM 
    campaign_data
GROUP BY 
    customer_segment;